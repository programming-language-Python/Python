В терминале прописываем путь к папке после этого пишем: django-admin startproject название_проекта
Пример: C:\Users\maks2\Desktop\PYTHON\Практика\Django\Django-test>django-admin startproject mysite
Для запуска локального сервера:
C:\Users\maks2\Desktop\PYTHON\Практика\Django\Django-test\mysite>python manage.py runserver
Создание приложения:
C:\Users\maks2\Desktop\PYTHON\Практика\Django\Django-test\mysite>python manage.py startapp название_приложения

Создание миграции: перед созданием миграции необходимо в settings.py внести созданное нами приложение в INSTALLED_APPS
python manage.py makemigrations (создаёт все миграции. migrate - создаёт миграции кроме приложений) названия_файла
(созданный файл находится в папке приложения в папке migrations (файл 0001_initial.py)). Можем посмотреть какой sql код сгенерирует Django или подредактировать код команда: python manage.py sqlmigrate articles 0001. Записали название файла и код миграции.
Применение миграции: python manage.py migrate
Можно посмотреть теперь БД в файле db.sqlite3 (для просмотра понадобится приложения SQL)

Шаблоны нужно создавать в папке templates потом в самой папке лучше всего создать ещё папку в которой будут уже находиться сами шаблоны, чтобы не возник конфликт между остальными приложениями или ошибка

ВАЖНО ПРИ ЗАЛИТИИ НА ХОСТ: в settings.py DEBUG=True заменить на DEBUG=False

План действий:
После создания проекта в среде, как и в любом Django проекте, первое, что необходимо сделать — внести изменения в файле settings.py а именно:

Меняем две переменные на

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Ваш часовой пояс/Ваш город' #Например: Europe/Moscow
Добавить папку для статических и медиа файлов

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

Далее создаём своё приложение командой

python manage.py startapp my_app

Насколько мне известно, хорошим тоном написания приложений на Django является разбиение проекта на отдельные приложения, и уже в них мы описываем функционал, который нам нужен. Такой подход обеспечивает лёгкий перенос приложений из одного проекта в другой, что очень удобно. Поехали дальше.

Как только приложение создано, нам нужно его зарегистрировать для того, чтобы начать его использовать. Добавим приложение в список используемых.

INSTALLED_APPS = [
    'django.contrib.admin',
    ...
    'django.contrib.staticfiles',
    'my_app',#наше приложение
]

Далее необходимо определить url адрес для нашего приложения, что тоже является хорошим тоном разработки. В папке приложения (не путать с папкой проекта) нужно предварительно создать(он обычно создаётся сам) файл urls.py. А затем в папке проекта в файле urls.py импортируем функцию include и прописываем адрес. Об этом также написано в комментариях в самом файле.

Заполним его следующим кодом.

from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='login')
]

Теперь выйдет ошибка, потому что account/views.py пустой. Исправим.

from django.shortcuts import render #импорт функции
# Create your views here.
def index(request):#создаем свою функцию
    context = {}#с помощью словаря можем передать модель и форму в шаблон HTML
    return render(request, 'my_app/index.html', context)#собственно вызываем шаблон HTML

Терминология: проект - в нём содержется несколько приложения.
Приложение - выполняет какие-то действия.
views.py - находится логика приложений
миграция - конструкция в которой django понимает какие изменения и когда он внёс в бд
