'''
class Person:
    pass # Пустой блок
p = Person()
print(p)

class Person:
    def sayHi(slef,d): # self нужен для определении функции
        print('Привет! Как дела?', d) 
Person().sayHi(1)
'''
'''
Метод __init__ запускается,
как только объект класса реализуется.
Этот метод полезен для осуществления
разного рода инициализации, 
необходимой для данного объекта.
'''
class Person:
    def __init__(self, name):
        self.name = name
    def sayHi(self):
        print('Привет! Меня зовут', self.name)
Person('Swaroop').sayHi()
'''
Здесь мы определяем метод __init__ так,
чтобы он принимал параметр name
(наряду с обычным self).
Далее мы создаём новое поле с именем name.
Обратите внимание, что это две разные
переменные, даже несмотря на то, что
они обе названы name. Это не проблема,
так как точка в выражении self.name
обозначает, что существует нечто с именем
«name», являющееся частью объекта «self»,
и другое name–локальная переменная.
Поскольку мы в явном виде указываем,
к которому имени мы обращаемся, путаницы не возникнет.
Важно отметить,что присоздании нового 
экземпляра класса мы невызываем
метод __init__ явным образом,а передаём 
аргументывскобкахпослеимени этого класса.
В этом и заключается специальная роль данного метода.
'''