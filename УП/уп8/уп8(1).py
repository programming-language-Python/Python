# 1) 1. Подключить библиотеку os.
import random
import shutil
import os
# 2. Получить сведения о текущей директории с помощью функции getcwd.
get = os.getcwd()
print(get)  # сведения о текущей директории

# 3. С помощью метода mkdir создать папку в корневом каталоге диска.
name = input("Введите название папки: ")
папка = get+'\\Desktop\\'+name  # "C:\\Users\maks2\Desktop\\"+name
os.mkdir(папка)

# 4. В новой папке с помощью метода makedirs создать еще 2 папки.
name1 = input("Введите название папки 1: ")
name2 = input("Введите название папке 2: ")
путь1 = папка + '\\' + name1
путь = папка + '\\' + name2
os.makedirs(путь)  # Создаёт папки которых нет в каталоге.
os.makedirs(путь1)
# Пример работы makedirs: C:\\Users\maks2\Desktop\папка\папка1 на пк нет папок: папка, папка1.
# В папке будет находится папка1

# 5. В первой из двух папок создать файл через открытие на запись “w”
# и внести туда краткое содержание последнего просмотренного вами фильма.
# Не забыть закрыть канал на запись.
namefile = input('Введите название первого файла: ')
file = путь1 + '\\'+namefile
text = input('Введите краткое содержание \
последнего просмотренного вами фильма: ')
with open(file, 'w', encoding='utf-8') as f:
    f.write(text)

# 6. Во вторую папку добавить второй файл и записать актеров этого фильма.
# Каждый актер на новой строке.
актёры = input('Второй файл. Введите через пробел актёров этого фильма: ')
актёры = актёры.replace(' ', '\n')
file1 = путь + '\\Актёры.txt'
with open(file1, 'w', encoding='utf-8') as f:
    f.write(актёры)

# 7. Вычислить размер первого файла с помощью метода path.getsize.
print('Размер файла', namefile, '=', os.path.getsize(file),
      'байт')  # возвращает размер указанного пути в байтах

# 8. Переименовать второй файл с помощью rename.
# Метод join позволяет вам совместить несколько путей при помощи присвоенного разделителя.
имя = input('Новое имя второго файла: ')
old_file = os.path.join(путь, 'Актёры.txt')
new_file = os.path.join(путь, имя)
os.rename(old_file, new_file)

# 9. Открыть второй файл на прочтение в бинарном режиме.
# помогает совершить точно что при выполнении этого блока файл закроется. f временная переменная.
with open(new_file, 'rb') as f:
    print('Чтение второго файла в бинарном режиме: ' + str(f.read()))

# 10. Вывести содержимое директории с указанием названий и пути всех подпапок и файлов, относящихся к заданному каталогу.
# os.walk() - возвращает объект-генератор. Из полученного объекта можно получить кортежи
# для каждого каталога в переданной walk файловой иерархии. Каждый кортеж состоит из трех элементов:
# 1. Абсолютный адрес очередного каталога (строка).
# 2. Имена (без адреса) подкаталогов первого уровня для текущего каталога (список).
# 3. Имена (без адреса) файлов данного каталога.
tree = os.walk(папка)
for derectory in tree:
    print(derectory)

# 11. Удалить первый файл и удалить папку, в которой он содержался.
rem_file = os.path.join(путь1, namefile)
os.remove(rem_file)  # удаляет файл.
os.rmdir(путь1)  # удаляет пустой каталог.

# 12. Открыть второй файл на добавление, записать еще несколько актеров.
актёры = '\n' + input('Запишите ещё нескольких актёров: ')
актёры = актёры.replace(' ', '\n')
with open(new_file, 'a', encoding='utf-8') as f:
    f.write(актёры)

# 13. Открыть полученный файл на прочтение 3 строки.
with open(new_file, 'r', encoding='utf-8') as f:
    strings = f.readlines()  # выводит список строк
    print(strings[2])

# 2) 1. Файл из предыдущего задания скопировать в новый файл в ту же папку.
# shutil.copyfile(src, dst, follow_symlinks=True) - копирует содержимое (но не метаданные)
# файла src в файл dst. Возвращает dst (т.е. куда файл был скопирован).
# src и dst это строки - пути к файлам. dst должен быть полным именем файла.
copy_file = путь + '\copy_file.txt'
shutil.copyfile(new_file, copy_file)
# 2. Переместить новый файл в папку в корневом каталоге, которая была создана в 3 пункте первого задания.
# Разница в том, что os.rename() не работает, если источник и место назначения
# находятся на разных дисках, в то время как shutil.move() не имеет значения, на каком диске находятся файлы
shutil.move(copy_file, папка)

# 3) 1. Удалить рандомно одного актера из нового файла. Применить модуль random.
copy_file = os.path.join(папка, 'copy_file.txt')
f = open(copy_file, 'r', encoding='utf-8')
strings = f.readlines()  # выводит список строк
print(strings)
f.close()
f = open(copy_file, 'w', encoding='utf-8')
del_актёр = random.choice(strings)
for string in strings:
    if string != del_актёр:
        f.write(string)
f.close()

# 2. Проверить, существует ли актер, принимаемый из input, в новом файле
поиск = input('Поиск актёра: ')
with open(copy_file, 'r', encoding='utf-8') as f:
    strings = f.readlines()  # выводит список строк
    if поиск in strings:
        print('Актёр', поиск, 'есть в файле')
    else:
        print('Актёра нет в файле')
